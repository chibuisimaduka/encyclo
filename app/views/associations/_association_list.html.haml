- entities_associations_map = associations.map {|a| [a.associated_entity, a] }
- entities_associations_map += nested_entity_values(entity, definition.nested_entity, definition.associated_entity).map {|e| [e, nil] } if definition.nested_entity
- id = "definition_#{definition.id}" # FIXME: I think the following was important : _#{inversed ? "i" : "n"}"
.definition{id: id}
  - raw_name = definition.associated_entity.name(current_user, current_language).value
  - name = definition.entity_has_many ? raw_name.pluralize : raw_name
  %span.association_definition_name= link_to name, definition.associated_entity
  \:
  - if entities_associations_map.size > 0
    = toggle_block handle: "Expand.." do |not_expanded|
      = show_more_records entities_associations_map, handle: "See more..", limit: 3 do |entity_association, is_more|
        - content_tag (is_more ? :div : :span) do
          - if not_expanded
            = render partial: "associations/entity", locals: {entity: entity_association.first, entity_showed: entity, association: entity_association.second, definition_entity: definition.associated_entity}
          - else
            = render partial: entity_association.first
- if definition.entity_has_many || entities_associations_map.blank?
  - if definition.associated_entity.is_intermediate
    = link_to_insert "Add", render(partial: "associations/intermediate_form", locals: {:entity => entity, definition: definition}), "##{id}"
  - else
    = link_to_insert "Add", render(partial: "associations/form", locals: {:entity => entity, definition: definition}), "##{id}"
