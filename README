The project is about building the largest structured database containing everything. Yes, finally a frighteningly ambitious idea after my disapointement of the YC batch. And the project is great because it scales really well. We start by adding one category at a time and release it, than we can add categories one by one until it holds everything.

The best way to see what this is about is probably through examples.

Examples :

Diseases:
The database would include every disease. You filter them by your symptoms and you get the likeliest ones based on your profile (age, gender, weight..) with documents that explains the effects, the treatments and if you should consult your doctor.

Entertainment:
The current examples that works well and will probably the first one released are like movies, books, games... Based on others and your ratings, you get suggestions. You also have documents for resumes and reviews.

Products:
If every product was on the database, you could find best product for your needs. Other people would help you choose for similar products by their ratings and reviews. For example, if you want to buy a laptop, you enter the range of attributes you want : 4GB-8GB of RAM, 500GB-2TB of HDD, a NVIDIA video card, at least 17 inch screen..). Then you will get a list of matching products at local retailers or delivering companies.

Learning:
For every field there would be ranked books, tutorials, wikis, articles... so you can learn by yourself anything. For example, you want to learn Ruby. You would see the best general documents to learn Ruby and you would also see the best documents to learn ruby variables, methods, classes..

Recipes:
You could enter the ingredients you have to receive a list of possible recipes. They would all be sorted by learning from your tastes as your are entering ratings for recipees. Of course, you would see reviews..

Binary packages:
Since every user has it's own entity, he can use it to link to the applications that he is using. Then in any OS he could fetch the applications if the binaries exists. The dependencies would also be handled by having them listed for every application.
Recipes:
You could enter the ingredients you have to receive a list of possible recipes.

Binary packages:
Since every user has it's own entity, he can use it to link to the applications that he is using. Then in any OS he could fetch the applications if the binaries exists. The dependencies would also be handled by having them listed for every application.

Library dependencies:
Never touch an XML file again.. Simply add the jars (or similar) to the dependencies of your project. And every other jar will also handle it's own dependencies.

Inventory:
A company can handle it’s inventory in the database. A library, for instance, would have an entity “books” and link to every book it has and it’s quantity. Also note that since it is bidirectional, you would also be able to see which library has the book in stock.

Nearby entities:
Every commerce has a location so you can search for nearby restaurants, hotels, gas stations... that meet your requirements (number of stars, user ratings, price) and you can read the reviews.

Travel:
Every destination is ranked by users. Every attraction, hotel, restaurant, airport... And you would get suggestions if you don’t know where to go. They would be based on your preferences. If you like a certain place, you will be suggested similar ones.

Structure overview :

It can hold everything because of the design. It has a built-in typing. Associations between entities and inheritance.

The structure I am proposing is composed of two main elements, an entity and a document. The secret ingredient is the entity. It represents a thing, a concept, but is also a type throught it's relations. For example, "movie" is an entity but also a type that defines every movie. The structure and associations are done through entities and the content lies into the documents. An entity has many documents.

An entity is a unique thing or concept. It has a parent, except for the root entity Entity. It has attributes which are either some constants like the average weight of an elephant or they are an association to another entity (has_one, has_many, ...). A movie has many actors.

A document is a pretty vague term for holding content. It can be of any media type, like video, text document,  q&a, forum, wiki, website template or a link to another website for now.

I'll write a separate technical document soon..

Goodies :

Some cool features that are partly implemented or that I'd like to have.

Multilingualism:
Entities are meant to be unique, no matter the language. Hence when an entity does not have the translation for it's name, it is shown in another language followed by a star. Translating an entity is really fast and easy to do, so they should all be translated in every language fast enough. With just the translated names and the images, the result is neat..

Styling:
One great advantage I want it to have is that the users would control the styling. Both the author of the document and the user that sees it could choose a different style. The user would then decide if he wants to always use his or to use the author's styling when present.

Scoring function:
You would be able to create your own scoring function. You could set ratios like time, ecological consequences or user ratings versus the price.

Advance search queries:
You have a lot more control over the search. The interface tries to emulate a real database client. You can filter by attributes or associated entities attributes. You can also select which fields are to be displayed. For example, list movies with the year and the directors.

Cloud storage:
Every user has one or many entities just for himself. He can easily upload a limited amount of private files.

Discovery:
If you're feeling adventurous or bored, you can check out proposed entities and documents. They are random at first, but becomes smarter by learning from your preferences.

Terminal:
There is a terminal included in the website. In brief I want to be able to do everything with just the keyboard and to run advanced commands that can’t be in the UI. I won't elaborate because I could write a whole document just on this, but you see the point.

Sharing:
You decide what you want to share and see from your friends. You can decide to share events like uploading a video, a picture, commenting, writing an article, a high rating, a low rating...

Ownership:
There is many way you can decide to let people edit your documents. You can be sole proprietary, no one can edit. It can be a wiki that anyone can edit or a more restricted wiki. It could also be like github. You could fork the document and do a pull request. Maybe you could do inline editing and let us compute the merge based on probabilities that it could be right. There could also be comments that are just for correcting or improving the document.

Data mode:
There is a mode designed for entering data efficiently.

File system:
Text documents looks a lot like github files. They have sub-documents and the content is similar to a README. Hence, I would like to have a tool used to sync up with the filesystem, like git, but that would be a lot simpler.

Shared database:
One crazy idea would be that the database be shared across every users computers. The big data space available would allow for good redundancy. It could also be faster because all the servers would be close to you. It would be great considering that most of the time computers are idle.

Stock options:
An even more crazy idea I had is to use stock options as a currency. What I dislike about Bitcoin is that it is purely speculative. Content on a database thought is not. It is logic to give something in exchange of data entered by a user. Information is worth something. Bigger content like videos, games and books could worth a lot.

Advantages :

The search results would be better than a regular search engine because you can easily scope by entity and you have a lot more control on the query. You also see the attributes of an entity and you can easily filter by them. Ex: Filter movies by genre.

By having all the preferences of the user combined with machine learning, there would be a huge potential of suggesting the user interesting documents.

The database is free to download so people could run complex queries to get information they want or to compute statistics.

Status :

I've started coding it for two months. The source code is available at https://github.com/pascalr/encyclo.

The best way to see the current status is the check out the video I made. There is no sound unfortunately, but it still shows enough. http://www.youtube.com/watch?v=z0r0etph7Cg

Hopefully people will already start contributing code. When it becomes a company though, rest assure your contribution won't be forgotten.

A lot of the code I wrote is bad and should be refactored and I didn't write a single test (that works) because I was changing everything every week. Sorry about that..

Any people is welcome if you are close (I am in Silicon Valley area for a little while) or advanced programmers remotely. If you are smart and don't even know how to program (but your good in math), your more than welcome to join me, rails isn't real programming anyway.. :p

If you just do a little of css it would be welcomed as I never took time to really learn it. Lost hours on trying to put a link another color than the default.. :(

Please send me feedback on any ideas or to improve this document.. You can send me an email at pascal.rainville@gmail.com

I realize that it won't be as simple as it sounds as it never is in software.. Just scaling will probably be a challenge hard enough by itself.. The difficulty is high, but the reward would be incredible..

And if you're a grumpy old programmer and thinks being generic and holding everything is just impossible, is it? How do you know? Have you tryied? Have others tried? To me it seems like a frighteningly ambitious idea. No one is going to come up with, I want to build a database to holds everything. I just wanted to build a database for movies.. Then, I added books and games because they are similar, then .... 

So, who's in?

Note : I could do the normal thing. Make the code rock solid for a specific thing and remove  the rest from the version. Waste time looking for investors ans convincing them. Hire some developpers. Go public with just books, games and videos. Then make deals with companies to link to sell them the product. I could do all that. But it seems boring and a waste of time. That's why I am posting this on HN. I wish people would see how great this can become and would start contributing. I wish..
