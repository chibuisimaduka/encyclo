What would the best website be? A website that does it all, exactly! This is what I am planning to do, I want to replace the World Wide Web! Crazy as it sounds, merging most of the web in a single application is certainly doable, and it gives a lot of benefits.

Main concept :
 
The WWW is an inefficient structure. The proof? Crawlers and search engines. You have to design an overly sophisticated crawler which hits the server uselessly to get the data. Then search engines have to process and compute the chaotic data, discarding spam websites, in order to give results which should already be structured in the first place..

The solution is simple yet daunting. I want the build the largest structured database that would hold the entire WWW.

Many websites are about a small company. They could be replaced by a template. You fill out some information for the entity (location, contact info, products...), add documents like reviews, FAQs. Let the company choose the design they want, provide a lot of samples. Et Voila!

There also is a lot of websites who is just about having content. To replace them, you simply incorporate their data. A short list of them: blogs, forums, news (TechCrunch, Forbes), articles (Wikipedia, ehow), q&as (StackOverflow), videos (Youtube, DailyMotion, Netflix), images (Flickr), files (MediaFire, 4shared, Dropbox) and many listing sites (IMDB, Craigslist).

Then you got websites that and are just about a little idea and the only reason it works is because of the brand or having a lot of users. Examples: twitter, reddit, loopt, ebay, amazon, linkedin... With a little work they could be integrated..

The only obvious websites that may be a problem to integrate is probably because they are a separate application and are really specialized like banking sites. They should use their own database anyway, for obvious reasons..

The database should be universal and unique because you don't want to split the data and the users. Hence it has to be free (no cost and open source) and the data must be accessible.

Advantages :

The search results would be better than a regular search engine because you can easily scope by entity and you have a lot more control on the query. You also see the attributes of an entity and you can easily filter by them. Ex: Filter movies by genre.

By having all the preferences of the user combined with machine learning, there would be a huge potential of suggesting the user interesting documents.

The database is free to download so people could run complex queries to get information they want or to compute statistics.

You remove the pain of having to setup servers and buy a domain.

You only have to create one account and remember one password! You can still have many aliases though.

Examples of use :

A lot of examples showing the awesomeness of my idea.

Products:
If every product was on the database, you could find the cheaper product that meets your requirements and that others recommend. You could also see other people reviews for it.

Entertainment:
The current examples that works well are like movies, books, games... One entity per movie. Based on others and your ratings, you get suggestions. You also have documents for resumes and reviews.

Diseases:
The database would include every disease. You filter them by your symptoms and you get the likeliest ones based on your profile (age, gender, weight..) with documents that explains the effects, the treatments and if you should consult your doctor.

Learning:
For every field there would be ranked books, tutorials, wikis, articles... so you can learn by yourself anything.

Recipes:
You could enter the ingredients you have to receive a list of possible recipes.

Binary packages:
Since every user has it's own entity, he can use it to link to the applications that he is using. Then in any OS he could fetch the applications if the binaries exists. The dependencies would also be handled by having them listed for every application.

Inventory:
A company can handle it’s inventory in the database. A library, for instance, would have an entity “books” and link to every book it has and it’s quantity. Also note that since it is bidirectional, you would also be able to see which library has the book in stock.

Nearby entities:
Every commerce has a location so you can search for nearby restaurants, hotels, gas stations... that meet your requirements (number of stars, user ratings, price) and you can read the reviews.

Travel:
Every destination is ranked by users. Every attraction, hotel, restaurant, airport... And you would get suggestions if you don’t know where to go. They would be based on your preferences. If you like a certain place, you will be suggested similar ones. Transportation like flights would be in the database too.

Structure overview :

The structure I am proposing is composed of two main elements, an entity and a document. The structure and associations are done through entities and the content lies into the documents. An entity has many documents.

An entity is a unique thing or concept. It has a parent, except for the root entity Entity. It has attributes which are either some constants like the average weight of an elephant or they are an association to another entity (has_one, has_many, ...). A movie has many actors.

A document is a pretty vague term for holding content. It can be of any media type, like video, text document,  q&a, forum, wiki, website template or a link to another website for now.

I'll write a separate technical document soon..

Goodies :

Some cool features that are partly implemented or that I'd like to have.

Multilingualism:
Entities are meant to be unique, no matter the language. Hence when an entity does not have the translation for it's name, it is shown in another language followed by a star. Translating an entity is really fast and easy to do, so they should all be translated in every language fast enough. With just the translated names and the images, the result is neat..

Styling:
One great advantage I want it to have is that the users would control the styling. Both the author of the document and the user that sees it could choose a different style. The user would then decide if he wants to always use his or to use the author's styling when present.

Scoring function:
You would be able to create your own scoring function. You could set ratios like time, ecological consequences or user ratings versus the price.

Advance search queries:
You have a lot more control over the search. The interface tries to emulate a real database client. You can filter by attributes or associated entities attributes. You can also select which fields are to be displayed. For example, list movies with the year and the directors.

Cloud storage:
Every user has one or many entities just for himself. He can easily upload a limited amount of private files.

Discovery:
If you're feeling adventurous or bored, you can check out proposed entities and documents. They are random at first, but becomes smarter by learning from your preferences.

Terminal:
There is a terminal included in the website. In brief I want to be able to do everything with just the keyboard and to run advanced commands that can’t be in the UI. I won't elaborate because I could write a whole document just on this, but you see the point.

Sharing:
You decide what you want to share and see from your friends. You can decide to share events like uploading a video, a picture, commenting, writing an article, a high rating, a low rating...

Ownership:
There is many way you can decide to let people edit your documents. You can be sole proprietary, no one can edit. It can be a wiki that anyone can edit or a more restricted wiki. It could also be like github. You could fork the document and do a pull request. Maybe you could do inline editing and let us compute the merge based on probabilities that it could be right. There could also be comments that are just for correcting or improving the document.

Data mode:
There is a mode designed for entering data efficiently.

File system:
Text documents looks a lot like github files. They have sub-documents and the content is similar to a README. Hence, I would like to have a tool used to sync up with the filesystem, like git, but that would be a lot simpler.

Shared database:
One crazy idea would be that the database be shared across every users computers. The big data space available would allow for good redundancy. It could also be faster because all the servers would be close to you. It would be great considering that most of the time computers are idle.

Stock options:
An even more crazy idea I had is to use stock options as a currency. What I dislike about Bitcoin is that it is purely speculative. Content on a database thought is not. It is logic to give something in exchange of data entered by a user. Information is worth something. Bigger content like videos, games and books could worth a lot.

Status :

I've started coding it for two months. The source code is available at https://github.com/pascalr/encyclo.

The best way to see the current status is the check out the video I made. There is no sound unfortunately, but it still shows enough. http://www.youtube.com/watch?v=z0r0etph7Cg

Hopefully people will already start contributing code. When it becomes a company though, rest assure your contribution won't be forgotten.

A lot of the code I wrote is bad and should be refactored and I didn't write a single test (that works) because I was changing everything every week. Sorry about that..

I am looking for smart imaginative developers. If many responds, financing would be welcomed.

Please send me feedback on any ideas or to improve this document.. You can send me an email at pascal.rainville@gmail.com

I realize that it won't be as simple as it sounds as it never is in software.. Just scaling will probably be a challenge hard enough by itself.. The difficulty is high, but the reward would be incredible..

So, who's in?
