#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'adviser_types'

module EntityAdviser
  class Client
    include ::Thrift::Client

    def get_suggestions(category_id, limit, offset)
      send_get_suggestions(category_id, limit, offset)
      return recv_get_suggestions()
    end

    def send_get_suggestions(category_id, limit, offset)
      send_message('get_suggestions', Get_suggestions_args, :category_id => category_id, :limit => limit, :offset => offset)
    end

    def recv_get_suggestions()
      result = receive_message(Get_suggestions_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_suggestions failed: unknown result')
    end

    def get_filtered_suggestions(category_id, limit, offset, predicate_ids)
      send_get_filtered_suggestions(category_id, limit, offset, predicate_ids)
      return recv_get_filtered_suggestions()
    end

    def send_get_filtered_suggestions(category_id, limit, offset, predicate_ids)
      send_message('get_filtered_suggestions', Get_filtered_suggestions_args, :category_id => category_id, :limit => limit, :offset => offset, :predicate_ids => predicate_ids)
    end

    def recv_get_filtered_suggestions()
      result = receive_message(Get_filtered_suggestions_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_filtered_suggestions failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_get_suggestions(seqid, iprot, oprot)
      args = read_args(iprot, Get_suggestions_args)
      result = Get_suggestions_result.new()
      result.success = @handler.get_suggestions(args.category_id, args.limit, args.offset)
      write_result(result, oprot, 'get_suggestions', seqid)
    end

    def process_get_filtered_suggestions(seqid, iprot, oprot)
      args = read_args(iprot, Get_filtered_suggestions_args)
      result = Get_filtered_suggestions_result.new()
      result.success = @handler.get_filtered_suggestions(args.category_id, args.limit, args.offset, args.predicate_ids)
      write_result(result, oprot, 'get_filtered_suggestions', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Get_suggestions_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CATEGORY_ID = 1
    LIMIT = 2
    OFFSET = 3

    FIELDS = {
      CATEGORY_ID => {:type => ::Thrift::Types::I32, :name => 'category_id'},
      LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'},
      OFFSET => {:type => ::Thrift::Types::I32, :name => 'offset'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_suggestions_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_filtered_suggestions_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CATEGORY_ID = 1
    LIMIT = 2
    OFFSET = 3
    PREDICATE_IDS = 4

    FIELDS = {
      CATEGORY_ID => {:type => ::Thrift::Types::I32, :name => 'category_id'},
      LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'},
      OFFSET => {:type => ::Thrift::Types::I32, :name => 'offset'},
      PREDICATE_IDS => {:type => ::Thrift::Types::LIST, :name => 'predicate_ids', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_filtered_suggestions_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

